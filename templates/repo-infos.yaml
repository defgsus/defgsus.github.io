
billion-bubbles:
  categories: data web
  short_desc: tool and website for graphing the top shareholders/insiders in (north american) capitalism
  long_desc: |
    I was following some crazy stream of desire to *once and for all* point the finger at the true
    enemies of beauty, creativity and well-being of nature and mankind... using the nasdaq.com API.
    Not the official one of course, but their
    internal website API which is not restricted by quota. Still it was days and days of downloading to
    get (probably) the whole graph of shareholders and insiders from the nasdaq database.

    Can i point the finger now? Sure! Blackrock, Vanguard, Fidelity, T. Rowe Price, Morgan Stanley,
    Wellington, Bank of America ... simply [the big bubbles](https://defgsus.github.io/billion-bubbles/).

    It is actually super creepy! The only *fun fact* i got from this experiments is this:
    Amazon is a little kitten compared to those investment funds. But thinking seriously about it:
    If Amazon already dictates prices and work conditions how f**king mighty is Blackrock?

frontpage-archive-2:
  categories: media archive
  short_desc: archive of german online press article titles
  long_desc: |
    Same purpose as the [teletext-archive-unicode](https://github.com/teletext-archive-unicode) -
    analyzing trends in news. Here the **titles**, **teasers** and **image texts** of a number of
    different german papers are stored.

    Learned: That committing a hundred html pages every 15 minutes makes the repository grow
    to over 700mb in two weeks. That's what happened to the
    [predecessor](https://github.com/defgsus/frontpage-archive). And i didn't really wanted to
    wait for github staff to examine and close the repo. The predecessor still collects a snapshot
    every month. Just to be able to take a look at the raw data and measure the development of
    applied scripts, ads and tracking.

frontpage-archive:
  hide: true

teletext-archive-unicode:
  categories: media archive
  short_desc: archive of german online teletexts
  long_desc: |
    I really liked teletext as a kid. It was looking like computer stuff. Now i'm just scraping
    it regularily to build some news trend analysis. Well, *news* sounds so regular. Let's say
    brainwashing dumbf**k that we get poured over our heads from day to night.

teletext-archive:
  hide: true

kek-online-archive:
  categories: media archive
  short_desc: archive of media ownership in germany
  long_desc: |
    My first attempt to use the github actions for scraping data.

    The KEK is an organisation collecting the shareholder relations of all newspapers, radio
    and tv stations a.s.o in germany. This repo stores a snapshot of their database every day.
    So in fact, it actually collects the amount of work that the KEK is spending every day
    to update their database.

good-github:
  categories: github archive
  short_desc: Collector of exceptional / somewhat personal github commit messages - updated daily
  long_desc: |
    I was trying to write my own *github trending* that also finds good repos that do not have stars
    and attention yet. It's [not super easy](https://defgsus.github.io/blog/2021/11/12/gharchive-first-post.html)
    to process all the github events that exist. In the course of trying i came across some interesting
    commit messages. *good-github* collects them using a hand-crafted list of words and publishes the
    messages in a daily journal.

impro:
  categories: web
  short_desc: quick and static html renderer
  long_desc: |
    Let's see ... if i need this often enough i might actually develop a good thing there..

defgsus:
  hide: true
  language: txt
  categories: profile
  short_desc: |
    The profile README
  long_desc: ''

defgsus.github.io:
  categories: github
  short_desc: |
    The index
  long_desc: |
    You are currently viewing it's [*github pages*](https://guides.github.com/features/pages/)!

ParkAPI:
  hide: true

gharchive-stats:
  categories: data github
  short_desc: |
    Personal plaything to make some sense of the gharchive.org data without a google account ;)
  long_desc: |
    A collection of github repos which have been pushed to in some automatic fashion during 2018:
    [defgsus.github.io/gharchive-stats/automatic.html](https://defgsus.github.io/gharchive-stats/automatic.html)

    Learned: [some patience](https://defgsus.github.io/blog/2021/11/12/gharchive-first-post.html)

bahn-api-history:
  categories: data archive
  short_desc: |
    Historic changelog of Deutsche Bahn Open API data (stations, free parking lots and elevator status)
  long_desc: ''

wurst:
  categories: audio web
  short_desc: |
    **w**eb-**u**tilized **r**eact **s**ynthesizer **t**est
  long_desc: |
    Just stumbled over the [Web Audio API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API).
    Actually i wanted to see if it's possible to program an efficient synthesizer in javascript.
    As it turns out, this API provides an interface that is exactly for building synthesizers...

    So then i wanted to see if [React](https://reactjs.org/) can be used to drive the event-loop
    of the step-sequencers. Did not want to use [redux](https://redux.js.org/) this time and learned about
    [React Hooks](https://reactjs.org/docs/hooks-reference.html) and especially
    [useReducer](https://reactjs.org/docs/hooks-reference.html#usereducer) and all these magic
    functions.

    As to be expected, the timing of `setTimeout` driving the react dispatchers is not good
    enough to drive an audio machine correctly (where 20 milliseconds off are already
    perceived as *not in the beat*). It's fun though!
    [Have a try](https://defgsus.github.io/blog/2021/10/12/wurst-web-synth.html)...

office-schedule-data:
  categories: data archive
  short_desc: |
    historic snapshots of free office appointment dates
  long_desc: |
    The data output of [office-schedule-scraper](#office-schedule-scraper).

kindergarten-times:
  categories: data archive
  short_desc: |
    historic timeline of arrival at kindergarten
  long_desc: |
    One of the important things each day is to generate data for this repository ;)

office-schedule-scraper:
  categories: data
  short_desc: |
    Scraper for (german) free dates at the public offices
  long_desc: |
    This is recording hundreds of public office calendars across germany at an interval of
    15 minutes.

    It's much more work than i anticipated in the first place and i'm still not sure
    exactly for what purpose.

clipig:
  categories: visual ml
  short_desc: |
    [OpenAI](https://openai.com)'s [CLIP](https://github.com/openai/CLIP)
    based image generator with complex config file controlled transformation and training pipelines
  long_desc: |
    *The web* has become quite an amazing place: Train a model on some of it's data. Ask for a depiction
    of your favorite fantasy book. [And it just does](https://defgsus.github.io/blog/2021/04/28/malazan-clip-features.html)!

    This is a somewhat usable tool for generating images using the CLIP critique. Check the
    [walkthrough](https://defgsus.github.io/clipig/walkthrough.html)
    and [some experimental results](https://defgsus.github.io/blog/2021/06/09/clipig-animal-transfer.html).

image-scraper:
  categories: visual ml
  short_desc: |
    Some basic image scraper with django as orm and server
  long_desc: |
    Actually, this is just a small dev tool to download images (porn images mainly),
    rate them via [CLIP](https://github.com/openai/CLIP) and search through them using
    natural language and reference images.

blog:
  categories: blog audio visual ml web data github
  short_desc: |
    Repo of my blog
  long_desc: |
    Guess the virus has taken it's toll. Or maybe because i'm 40. Anyways, this is my programming
    blog. Using [Jekyll](https://jekyllrb.com/) and [Jupyter notebooks](https://jupyter.org/)
    as the basis for static site generation.

ufa:
  categories: web privacy
  short_desc: |
    **Überwachung für Alle** - self-surveillance browser add-on
  long_desc: |
    Spy on your own browser actions (request, keystrokes, mouse actions) using this
    small web extension and [Elasticsearch](https://www.elastic.co/elasticsearch/).

    Learned about the (somewhat unified) Browser Extensions API
    ([MDN](https://developer.mozilla.org/en-US/Add-ons/WebExtensions), [Chrome](https://developer.chrome.com/docs/extensions/reference/))
    which is so powerful that **i do not trust any browser extension anymore**, except my own ones,
    and [uBlock Origin](https://ublockorigin.com/) and [uMatrix](https://github.com/gorhill/uMatrix).
    The latter, though, i just trust out of good faith.

elastipy:
  categories: lib data
  short_desc: |
    python elasticsearch query module for easily accessing nested aggregations and such
  long_desc: |
    This is a library for [Elasticsearch](https://www.elastic.co/elasticsearch/) queries. They
    provide [their own](https://github.com/elastic/elasticsearch-dsl-py) library for that
    but it does not help with either generating the right query or accessing the results in
    a sane manner. Elastipy has a fully typed interface and tries to be smart with aggregation
    responses, converting them into simplified `dict`s or
    [pandas DataFrames](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html).

    Learned: Generating documentation and examples from jupyter notebooks. And that the whole
    documentation system in python is good only on the surface.
    Actually it's painful, not well documented and time consuming.
    No surprise, why all the major libs have their own documentation infrastructure
    (hacked [Sphinxes](https://www.sphinx-doc.org/)).

symmetrical-disco:
  categories: visual
  short_desc: |
    ray-tracer entirely in python
  long_desc: |
    Thought: If i write the raytracer (in this case a sphere-tracer) in python, there are
    endless pythonian things i can do on top to create amazing images.

    Learned: Writing a raytracer in C or Cuda instead of python is **not** premature optimization.
    The python raytracer is so terribly slow that i actually did not fix the immediate bugs and just stopped
    the experiment.

cthulhu2d:
  categories: game
  short_desc: |
    toying with another game idea and the pymunk physics framework
  long_desc: |
    Tried: A 2d minecraft.

    Learned: That in order to pass objects, you have to completely destroy them or build a tunnel or somehting..

    This came out of a deep depression through covid winter 2020 with too much home schooling and home officing
    and no place to hide. In the end i did not came across the challange of designing a physical-model-based
    character that actually can walk. Tried evolutionary algos with complicated fitness evaluation and
    training pools stored in [elasticsearch](https://www.elastic.co/elasticsearch/).

pypickpack:
  categories: game
  short_desc: |
    In an amazon fulfillment center near you the job application turns out to be
    against a bunch of newly designed super-efficient robots!
  long_desc: |
    Started reworking the [pickpack](#pickpack) idea into python to experiment
    with [Maximum Expected Utility](https://en.wikipedia.org/wiki/Expected_utility_hypothesis) described by
    [Artificial Intelligence: A Modern Approach (Russel & Norvig)](http://aima.cs.berkeley.edu/).
    But it's still missing a straight game design.

    Basically, you are picking and packing in an amazon fulfillment center against a bunch of
    super-efficient robots. The idea is, that the robots would actually need to cheat
    (stay in your way, put wrong stuff into your parcels, ..) if you are really good.
    Of course, if the ever-present fulfillment center's performance measures are too low,
    the manager should come complaining.

    Learned: In python you won't get millions of search branches checked per second so you
    have to rely more on heuristics and cheats.

trends-competition:
  categories: ml
  short_desc: |
    Yet another [TReNDS Neuroimaging competition](https://www.kaggle.com/c/trends-assessment-prediction) sourcecode
  long_desc: |
    It was hosted on kaggle and **a lot** of teams joined. I only used **relevance vector regression** on
    the small MRT-based CSV tables which bought an evaluation error of 16.4% and place 891.
    The top solutions where 15.6%.

    Learned: That this particular problem in the competition was not helped by mere compute. The best teams used
    all kinds of complicated things and ensembled them together to gain just one percent better than a simple RVR
    on a fraction of the data.

parking-data:
  categories: data archive
  short_desc: |
    historic archive of free parking places across germany
  long_desc: |
    The daily export of [parking-scraper](#parking-scraper).

parking-scraper:
  categories: data
  language: python  # not jupyter
  short_desc: |
    collection of scrapers to get parking space occupancy data across germany
  long_desc: |
    It scrapes all those different little websites where free parking lots are displayed and stores the
    numbers - every 5 minutes.
    There's a small article about the [1st year of data](https://defgsus.github.io/blog/2021/04/08/one-year-parking.html).

pickpack:
  categories: game
  short_desc: |
    react game in progress
  long_desc: |
    Actually it's a political statement. Or it was planned to be. But it's
    missing the game idea. See [pypickpack](#pypickpack)

shadertoz:
  categories: visual data shader
  short_desc: |
    momentarily a django using the shadertoy public api
  long_desc: |
    Another personal plaything related to [shadertoy.com](https://shadertoy.com). Besids the official API
    it also allows crawling the shadertoy website / internal API to retrieve comments.

    One of the goals is to be able to somehow search for specific formulas / syntax trees, by parsing
    all the GLSL in python. The parser somewhat works by adjusting an old
    [Backus-Naur for C--](https://www2.cs.arizona.edu/~debray/Teaching/CSc453/DOCS/cminusminusspec.html) that i found
    and adding the few GLSL specific things ([glsl.lark](https://github.com/defgsus/shadertoz/blob/b89c15db6dd4821126a3e970a57eadcb97f529d5/shaders/util/glsl/glsl.lark))
    and run it in [lark](https://github.com/lark-parser/lark). But it exponentially explodes in runtime when shown
    long and complicated formulas.

pyvolution:
  categories: lib
  short_desc: |
    evolutionary python framework
  long_desc: |
    Guess everybody has to release one of these libs once. It's not particularily good or clever, or even tested twice.

processflow:
  categories: lib
  short_desc: |
    Define a flow, fill with meaning and then run parallel and persistant jobs.
  long_desc: |
    Just some experiments in the realm of micro services.

django-joblog:
  categories: lib
  short_desc: |
    A generic django-utility that helps to log stuff to the database.
  long_desc: |
    Quite helpful for a couple of work projects. Not a mature generic lib, though.

django-clear-tables:
  categories: lib
  short_desc: |
    django manage.py task that clears the content of the django Permission and ContentTypes tables
  long_desc: |
    This just good useful to be able to install via pip when moving database content via `manage.py dumpdata`.

lovebot:
  categories: game
  short_desc: |
    Botlove python server and client + webclient
  long_desc: |
    Inspired by the original *Botwars* for which i don't find the link right now. But [this](https://botwars.io/)
    seems to be a somewhat worthy predecessor. Basically it's about playing a competitive game by
    providing source code. The original Botwars was simply a grid of memory cells which are executed and
    which try to overwrite and patch each other. The winner is the one with the most occupied cells.

    My version is more the classic 2D environment, using
    [signed distance functions](https://en.wikipedia.org/wiki/Signed_distance_function) which allows for
    easy implementation of distance sensors and the like.


logmonitor:
  categories: web
  short_desc: |
    Web-view for system logs
  long_desc: |
    If you rent a second-hand server, e.g. one that has been used for *something* before, you'll most likely
    get a ton of requests of content that was there before, as well as malicious attacks to all kind of
    ports and, of course, common PHP urls. This project is a django that collects the content of all the log
    files, stores all received POST requests, collects the *whois* of IPs and also presents
    a honeypot username/password form.

brain-discord:
  categories: web
  short_desc: |
    Yet another [discord](https://discord.com/) bot
  long_desc: |
    There was a time, when we used discord for work meetings. This little bot joined. It would
    post *Live of Brian* or *Bladerunner* citations with the person names replaced by the names of the chat members.
    It could display tickets from [YouTrack](https://www.jetbrains.com/youtrack/). And it would
    engage in a german [Eliza](https://en.wikipedia.org/wiki/ELIZA) therapy chat.

musicpatterns:
  categories: audio
  short_desc: |
    "Musical" pattern generation in python
  long_desc: |
    Just a plaything with python generators and *mathematical* note generation. It has some good
    starting point but is not well suited to manage chords or polyphone sequences.

bm-wahl-18-jena:
  categories: data
  short_desc: |
    Oberbürgermeisterwahl Jena/Thüringen 2018 - Datenbeschaffung und Analyse
  long_desc: ''

thegame:
  categories: game
  short_desc: |
    testbed for python based pixel adventure
  long_desc: |
    OpenGL rendering graph and [A* search](https://en.wikipedia.org/wiki/A*_search_algorithm) movement.

    The rendering is particularily nice, optically. It uses *sphere tracing* through a pre-generated
    3D distance field for the soft-shadows.

    Also started an editor in [PyQt](https://github.com/pyqt/). Learned: Programming Qt in python
    is almost fun, compared to C++.

agenda90210-blog:
  categories: blog data language
  language: data
  short_desc: |
    external data for [agenda90210 blog](https://agenda90210.blogspot.com/)
  long_desc: |
    At the time i simply found it amazing that one can freely post javascript on blogspot.com.
    So i published a few data-mining articles. When the data became too much for one post
    (the posting interface would not work anymore) i moved it to this repo and requested
    it externally.

wikistats:
  categories: data
  short_desc: |
    just fascinated by wikimedia's pageviews data, doing some correlations
  long_desc: ''

shadertox:
  categories: visual web shader
  short_desc: |
    Shader in da Browser via da Django
  long_desc: ''

fritztrack:
  categories: web privacy
  short_desc: |
    Owning the Fritz!Box with Django
  long_desc: |
    A nasty parent tool to overview what the kids are actually doing on the web. Three reason why
    i did not continue for long:

    1. They got old enough to truly deserve a private sphere.
    2. All of them got mobile data contracts at some point.
    3. This logger tool mostly collected HD video data streams :D

wahl17:
  categories: data
  short_desc: |
    Bundestagswahl 2017 Wahlergebnisse
  long_desc: ''

github-nodes:
  categories: data github
  short_desc: |
    Visualizing connections between github users and repos (python+js)
  long_desc: ''

afd-chat:
  categories: data language
  short_desc: |
    afd party's social media leak as a service
  long_desc: |
    Someone leaked the chat logs of an internal AfD whatsapp group.
    I did some [word statistics](https://defgsus.github.io/afd-chat/).

neurotools:
  categories: lib ml
  short_desc: |
    small collection of brainimaging helper scripts in python
  long_desc: ''

lolpig:
  categories: lib compiler
  short_desc: |
    LOw-Level Python Interface Generator
  long_desc: ''

cppy:
  categories: lib compiler
  short_desc: |
    python to cpp converter - the hard way
  long_desc: ''

pector:
  categories: lib visual
  short_desc: |
    simple python vector/matrix lib with focus on geomety
  long_desc: |
    Actually quite proud of it (except the name). No good performance but
    a helpful API for the usual vector-in-space manipulation.

QShadertoy:
  categories: visual shader
  short_desc: |
    Off-line Shadertoy renderer using web-API 
  long_desc: ''

Syntak:
  categories: lib compiler
  short_desc: |
    Generative parser with runtime syntax definition
  long_desc: |
    Coming from C++ and playing with yacc/bison i was fascinated by python's real-time everything.
    To be able to create a compiler during runtime was a new thought to me.

sonot:
  categories: audio
  short_desc: |
    Spanish Organ Tablature Notation
  long_desc: ''

csmod040:
  categories: audio visual
  short_desc: |
    CS Modular Editor
  long_desc: ''

beat-detect:
  categories: lib audio
  short_desc: |
    Attempt to refacture Rob Harper's beat-detect code into a useable cross-platform library
  long_desc: ''

solstice:
  categories: visual
  short_desc: |
    "Solstice 2016" happening interface
  long_desc: ''

neurost:
  categories: ml shader
  short_desc: |
    Neuronal ShaderToy Framework
  long_desc: |
    From the good ol' [Shadertoy times](https://defgsus.github.io/blog/2021/10/12/kaliset-explorer.html).

mnn:
  categories: lib ml
  short_desc: |
    modular neuronal network lib 
  long_desc: ''

brainf:
  categories: lib compiler
  short_desc: |
    Brainfuck interpreter and evolutionary framework
  long_desc: ''

sociopyth:
  categories: data
  short_desc: |
    collection of scripts to download stuff from the web
  long_desc: ''

kaliset:
  categories: visual fractal
  short_desc: |
    kaliset explorer
  long_desc: |
    There is this user called **Kali** who
    [posted on fractal forums](https://www.fractalforums.com/new-theories-and-research/very-simple-formula-for-fractal-patterns/)
    this amazing formula. It got very popular on [Shadertoy](https://www.shadertoy.com/results?query=kaliset).
    And i used it [fulldome](https://vimeo.com/126536758) once in a while.

    This is a C++ implementation.

scheeder:
  categories: visual lib
  short_desc: |
    OpenGL / GLSL in Qt Project as demonstration for student classes
  long_desc: |
    Well, it was just one class where a [friend](https://soundcloud.com/a_s_tarantoga) was teaching at the time.

shatrabase:
  categories: game ml
  short_desc: |
    database and engine host for the Altai game Shatra, derived from ChessX
  long_desc: |
    A project with [Francis Monkman](http://afkm.com/). Through friends in Russia he got into
    contact with this game called Shatra. It's the mongolian version of a checkers-like game.
    Some russian suggested to use chess figures which makes it a kind of turbo-checker-chess.

    It's a cool game and Francis has been working for decades on efficient
    [alpha-beta pruning](https://en.wikipedia.org/wiki/Alpha%E2%80%93beta_pruning) for this
    particular rule set.

    We forked [ChessX](https://chessx.sourceforge.io/) which is a Qt/C++ project, mainly
    for archiving and studying chess games, and extended it to both Shatra versions and
    added a play mode.

ttt:
  categories: game ml
  short_desc: |
    TicTacToe With Capturing - engine
  long_desc: ''

csmod2:
  categories: audio visual
  short_desc: |
    CymaSonics Modular II - A modular audio/video framework in Qt
  long_desc: ''

cudagol:
  categories: game ml
  short_desc: |
    Game Of Life implemented in Cuda
  long_desc: ''

rsom:
  categories: lib audio
  short_desc: |
    A tool for Self-Organizing Maps from audio data for use with NI Reaktor
  long_desc: ''

